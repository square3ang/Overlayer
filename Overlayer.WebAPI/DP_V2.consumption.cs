// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
namespace DifficultyPredictor
{
    public partial class DP_V2
    {
        /// <summary>
        /// model input class for DP_V2.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"tileCount")]
            public float TileCount { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"twirlRatio")]
            public float TwirlRatio { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"setSpeedRatio")]
            public float SetSpeedRatio { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"minTA")]
            public float MinTA { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"maxTA")]
            public float MaxTA { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"taAverage")]
            public float TaAverage { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"taVariance")]
            public float TaVariance { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"taStdDeviation")]
            public float TaStdDeviation { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"minSA")]
            public float MinSA { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"maxSA")]
            public float MaxSA { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"saAverage")]
            public float SaAverage { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"saVariance")]
            public float SaVariance { get; set; }

            [LoadColumn(12)]
            [ColumnName(@"saStdDeviation")]
            public float SaStdDeviation { get; set; }

            [LoadColumn(13)]
            [ColumnName(@"minMs")]
            public float MinMs { get; set; }

            [LoadColumn(14)]
            [ColumnName(@"maxMS")]
            public float MaxMS { get; set; }

            [LoadColumn(15)]
            [ColumnName(@"msAverage")]
            public float MsAverage { get; set; }

            [LoadColumn(16)]
            [ColumnName(@"msVariance")]
            public float MsVariance { get; set; }

            [LoadColumn(17)]
            [ColumnName(@"msStdDeviation")]
            public float MsStdDeviation { get; set; }

            [LoadColumn(18)]
            [ColumnName(@"minBpm")]
            public float MinBpm { get; set; }

            [LoadColumn(19)]
            [ColumnName(@"maxBpm")]
            public float MaxBpm { get; set; }

            [LoadColumn(20)]
            [ColumnName(@"bpmAverage")]
            public float BpmAverage { get; set; }

            [LoadColumn(21)]
            [ColumnName(@"bpmVariance")]
            public float BpmVariance { get; set; }

            [LoadColumn(22)]
            [ColumnName(@"bpmStdDeviation")]
            public float BpmStdDeviation { get; set; }

            [LoadColumn(23)]
            [ColumnName(@"level")]
            public float Level { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for DP_V2.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"tileCount")]
            public float TileCount { get; set; }

            [ColumnName(@"twirlRatio")]
            public float TwirlRatio { get; set; }

            [ColumnName(@"setSpeedRatio")]
            public float SetSpeedRatio { get; set; }

            [ColumnName(@"minTA")]
            public float MinTA { get; set; }

            [ColumnName(@"maxTA")]
            public float MaxTA { get; set; }

            [ColumnName(@"taAverage")]
            public float TaAverage { get; set; }

            [ColumnName(@"taVariance")]
            public float TaVariance { get; set; }

            [ColumnName(@"taStdDeviation")]
            public float TaStdDeviation { get; set; }

            [ColumnName(@"minSA")]
            public float MinSA { get; set; }

            [ColumnName(@"maxSA")]
            public float MaxSA { get; set; }

            [ColumnName(@"saAverage")]
            public float SaAverage { get; set; }

            [ColumnName(@"saVariance")]
            public float SaVariance { get; set; }

            [ColumnName(@"saStdDeviation")]
            public float SaStdDeviation { get; set; }

            [ColumnName(@"minMs")]
            public float MinMs { get; set; }

            [ColumnName(@"maxMS")]
            public float MaxMS { get; set; }

            [ColumnName(@"msAverage")]
            public float MsAverage { get; set; }

            [ColumnName(@"msVariance")]
            public float MsVariance { get; set; }

            [ColumnName(@"msStdDeviation")]
            public float MsStdDeviation { get; set; }

            [ColumnName(@"minBpm")]
            public float MinBpm { get; set; }

            [ColumnName(@"maxBpm")]
            public float MaxBpm { get; set; }

            [ColumnName(@"bpmAverage")]
            public float BpmAverage { get; set; }

            [ColumnName(@"bpmVariance")]
            public float BpmVariance { get; set; }

            [ColumnName(@"bpmStdDeviation")]
            public float BpmStdDeviation { get; set; }

            [ColumnName(@"level")]
            public float Level { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("DP_V2.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
